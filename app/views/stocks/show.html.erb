
<%= javascript_include_tag "stocks2.coffee.js" %>
<%= include_gon(:init => true) %>

<% content_for :title do %>
  <title><%= @stock[:ticker_symbol] %> Stock Predictions - StockHero.com</title>
<% end %>

<!-- FULL WIDTH GRAPH -->

<section class="stockpage-graph-full blue-blur">
  <div class="constrainer">
    
    <!-- title of the stock graph -->
    <div id = "title-replace-box">
      <%= render partial: "shared/graph/stock_title", locals: {stock: @stock, target: @target} %>
    </div>
    
    <div class="col-xs-12 col-sm-9 stockpage-graph-col">
      <div class="graph-background-div">
        <p class="tkr"><%= @stock.ticker_symbol %></p>
      </div>
      
      <div id="stock-div" class="graph-div"></div>

      <div class="graph-full-timeframes">
        <% @graph_buttons.each do |button| %>
          <% if button == "3M" || button == "6M" %>
            <span class="add-timeframes">
              <div class="timeframe-item pull-left" id="button" data-button-type=<%= button %>>
                <a><%= button %></a>
              </div>
            </span>
          <% else %> 
            <div class="timeframe-item pull-left" id="button" data-button-type=<%= button %>>
              <a><%= button %></a>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>

    <div class="col-sm-3 stockpage-graph-stats-col">

      <div id ="graph-replace-box">
        <%= render partial: "shared/graph/daily_price.html.erb", locals: {price:@price_point} %>
      </div>
    </div>

    <div class="col-sm-12 col-md-9 stockpage-mobile-buttoms-col">

      <div class="graph-mobile-predict-button-div">
        <a class="btn">PREDICT APPL</a>
      </div>

      <div class="graph-mobile-open-prediction">
        <div class="graph-mobile-open-prediction-col col-xs-4">
          <p class="graph-mobile-open-prediction-figure">1 DAY</p>
          <p class="graph-mobile-open-prediction-title">TIME LEFT</p>
        </div>
        <div class="graph-mobile-open-prediction-col col-xs-4">
          <p class="graph-mobile-open-prediction-figure">$170</p>
          <p class="graph-mobile-open-prediction-title">TARGET PRICE</p>
        </div>
        <div class="graph-mobile-open-prediction-col col-xs-4">
          <p class="graph-mobile-open-prediction-figure">+3</p>
          <p class="graph-mobile-open-prediction-title">POINTS</p>
        </div>
      </div>
      <div class="graph-mobile-close-prediction-button-mobile">
        <a class="btn">CLOSE PREDICTION</a>
      </div>

    </div>

  </div>
</section>


<!-- END FULL WIDTH GRAPH -->



<div class="constrainer">

  <div class="col-xs-12 col-sm-9 stockpage-body">

  <script type="text/javascript">
    var gDayForTimeSelection;
    var picker;

    var timeSetter = function(dateInput) {
      if ((gDayForTimeSelection+19*1000*3600).validStockTime()) { //add 19 hours because its a valid afternoon time. Check if its valid. If its not, it means that the selected day is a half day. Holidays are blocked dates by the calendar.
        $('#timepicker').val('4:00 PM');
      }
      else {
        $('#timepicker').val('1:00 PM');
      }
    }

    var updateTimePicker = function(picker) { //update the timepicker after it has loaded on the page already.
      if (gDayForTimeSelection == undefined) { //this is a duplicated function starting here.
          picker.set('min',[9,30]);  
        }
        else {
          currentDay = new Date().toJSON().slice(0,10);
          currentGT = currentDay.graphTime();
          if (gDayForTimeSelection === currentGT) {
            picker.set('min',[9,30]);

            if (gDayForTimeSelection === currentGT) {
              var newD = new Date();
              var minutes = newD.getMinutes();
              var minMinutes = (minutes>=30 ? 0 : 30);
              picker.set('min',[minMinutes, newD.getHours()]);
            }
          }
          else {
            picker.set('min',[9,30]);
          }

          if (!(gDayForTimeSelection+19*3600*1000).validStockTime()){ //add 19 hours because valid stock time takes graphtime in gmt.
            picker.set('max',[13,0]);
          }
          else {
            picker.set('max',[16,0])
          }
        }

      //picker.set('min', [12,30]);
    }

    $(function() {

      var dPM = function() { //datePickerMaker.
        var d = new Date(); //get current date with time offset.
        var gT = d.toString().graphTime(); //this comes out in GMT time. 
        var offSet = gT.offsetTime(); //gets the offset of the current time..

        //now I have EST in graphtime, for the current time.
        var eST = gT - (5*3600*1000-offSet); //offSet is in graphTime.

        //get the hour of the current time..
        //if the hour is less than 16:00, show today as the min date.
        //if the hour is greater than 16:00, show tomorrow as the min date.
        var hourFormat = eST.hourString();

        var minTime;

        if (hourFormat < "16:00:00") {
          var returnDate = new Date(eST.gmtString());
          var tzOffset = returnDate.getTimezoneOffset();
          minTime = new Date((eST + tzOffset*60*1000).gmtString());
        }
        else {
          var t = eST + 3600*8*1000; //adding 8 hours for after hours predictions so they jump to the next day.
          var returnDate = new Date(t.gmtString());
          var tzOffset = returnDate.getTimezoneOffset();
          minTime = new Date((t + tzOffset*60*1000).gmtString());
        }

        return {
          disable: [
            1,7, //disable all weekends.
            //this is the holiday array to remove dates. Months are set 0-11, not 1-12.
            [2010,00,01], [2010,00,18], [2010,01,15], [2010,03,02], [2010,04,31], [2010,06,05], [2010,08,06], [2010,10,25], [2010,11,24],
            [2011,00,17], [2011,00,21], [2011,03,22], [2011,04,30], [2011,06,04], [2011,08,05], [2011,10,24], [2011,11,26],
            [2012,00,02], [2012,00,16], [2012,01,20], [2012,03,06], [2012,04,28], [2012,06,04], [2012,08,03], [2012,10,22], [2012,11,25],
            [2013,00,01], [2013,00,21], [2013,01,18], [2013,02,29], [2013,04,27], [2013,06,04], [2013,08,02], [2013,10,28], [2013,11,25],
            [2014,00,01], [2014,00,20], [2014,01,17], [2014,03,18], [2014,04,26], [2014,06,04], [2014,08,01], [2014,10,27], [2014,11,25],
            [2015,00,01], [2015,00,19], [2015,01,16], [2015,03,03], [2015,04,25], [2015,08,07], [2015,10,26], [2015,11,25],
            [2016,00,01], [2016,00,18], [2016,01,15], [2016,02,25], [2016,04,30], [2016,06,04], [2016,08,05], [2016,10,24], [2016,11,26],
            [2017,00,02], [2017,00,16], [2017,01,20], [2017,03,14], [2017,04,29], [2017,06,04], [2017,08,04], [2017,10,23], [2017,11,25],
            [2018,00,01], [2018,00,15], [2018,01,19], [2018,02,30], [2018,04,28], [2018,06,04], [2018,08,03], [2018,10,22], [2018,11,25],
            [2019,00,01], [2019,00,21], [2019,01,18], [2019,03,19], [2019,04,27], [2019,06,04], [2019,08,02], [2019,10,28], [2019,11,25],
            [2020,00,01], [2020,00,20], [2020,01,17], [2020,03,10], [2020,04,25], [2020,06,03], [2020,08,07], [2020,10,26], [2020,11,25]
          ],
          min: minTime,
          onSet: function(context) {
            if (context.select != undefined) {
              console.log(context.select);
              var d = new Date(context.select.gmtString()).toJSON().slice(0,10); //get rid of the timezone adjustment.
              gDayForTimeSelection = d.graphTime();
              console.log(gDayForTimeSelection);
              timeSetter();
              if (picker != undefined) {
                updateTimePicker(picker);
              }
            }
          }
        };
      
      };

      var dPO = dPM(); //datePickerObject
      $('#datepicker').pickadate(dPO);

      var tOM = function() { //timeObjectMaker
        var inputTime;

        var maxT = [16,0];
        var minT, currentDay, currentGT;

        if (gDayForTimeSelection == undefined) {
          minT = [9,30];  
        }
        else {
          currentDay = new Date().toJSON().slice(0,10);
          currentGT = currentDay.graphTime();
          if (gDayForTimeSelection === currentGT) {
            var newD = new Date();
            var minutes = newD.getMinutes();
            var minMinutes = (minutes>=30 ? 0 : 30);
            minT = [minMinutes, newD.getHours()];
          }
          else {
            minT = [9,30];
          }

          if (!(gDayForTimeSelection+19*3600*1000).validStockTime()){ //add 19 hours because valid stock time takes graphtime in gmt.
            maxT = [13,0];
          }
        }
        console.log("MIN:"+minT);
        return {
          min: minT,
          max: maxT
        };
      }

      
      $("#timepicker").click(function() {
        console.log("clicked");
        var $input = $('#timepicker').pickatime(tOM());
        picker = $input.pickatime('picker');

      });
    });
  </script>

  <% if @prediction.active %>
    <%= render partial: 'shared/prediction_open', locals: {prediction: @prediction} %>
  <% else %>
    <%= render 'shared/prediction_form' %>
  <% end %>

  <!-- STREAM POSTS -->
  <div class = "stream" >
    <%= render partial: "streams/stream_main", locals: {streams: @streams} %>
  </div>
  <div id = "infinite-scrolling" >
    <%= will_paginate @streams %>
  </div>

</div>

<div class="col-sm-3 stockpage-sidebar">
  <%= render partial: 'stocks/ranking', locals: {stock: @stock} %>

  <%= render partial: 'shared/popular_stocks' %>
</div>


  









